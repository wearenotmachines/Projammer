/*
 * spawn-cmd.js:
 *
 * (C) 2013 First Opinion
 * MIT LICENCE
 *
 */

var spawn  = require('child_process').spawn;

//
// Module
//
var spawnCmd = module.exports = {};

//
// Class for creating and handling spawn cmds
//
spawnCmd.SpawnCmd = function (cmd, args, opts, next) {
  // Cache this
  var self = this;
  // Add next to instance
  self.next = next;
  // Execute cmd
  self.proc = spawn(cmd, args, opts);
  // Add listeners
  self.proc.stdout.on('data', self.stdout);
  self.proc.stderr.on('data', self.stderr);
  self.proc.on('error', function (err) { self.err(err) });
  self.proc.on('close', function (code, signal) { self.close(code, signal) });
}

spawnCmd.SpawnCmd.prototype.stdout = function (data) {
  this.stdout = data.toString('utf-8');
};

spawnCmd.SpawnCmd.prototype.stderr = function (data) {
  this.stderr = data.toString('utf-8');
};

spawnCmd.SpawnCmd.prototype.err = function (err) {
  this.err = err;
};

spawnCmd.SpawnCmd.prototype.close = function (code, signal) {
  if (code !== 0) {
    var error = new Error('Unsucessful exit code');
    if (this.err) {
      error = this.err;
    } else if (this.stderr) {
      error = new Error(this.stderr);
    }
    return this.next(error)
  }
  this.next();
};

// Helper method that wraps class instantiation
spawnCmd.spawn = function (cmd, args, opts, next) {
  // Argument handling / cahcing
  return (typeof opts === 'function')
    ? new spawnCmd.SpawnCmd(cmd, args, {}, opts)
    : new spawnCmd.SpawnCmd(cmd, args, opts, next);
};